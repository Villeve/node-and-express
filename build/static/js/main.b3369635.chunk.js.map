{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Persons","newFilter","persons","setPersons","setErrorMessage","divStyle","display","filterText","filter","person","name","includes","map","i","key","style","onClick","window","confirm","personService","then","response","setTimeout","catch","error","filteredPersons","e","removePerson","number","printPersons","Filter","handleFilterChange","value","onChange","Form","newName","handleNameChange","newNumber","handleNumberChange","addName","type","Notification","message","className","App","useState","errorMessage","setNewName","setNewNumber","setNewFilter","useEffect","data","console","log","target","preventDefault","personObject","Math","floor","random","undefined","find","forEach","updatedObject","alert","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3369635.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://powerful-fjord-13341.herokuapp.com/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst remove = (id) => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {\n  getAll: getAll,\n  create: create,\n  update: update,\n  remove: remove\n}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './App.css'\n\nconst Persons = ({ newFilter, persons, setPersons, setErrorMessage }) => {\n  const divStyle = {\n    display: 'inline'\n  }\n\n  const filterPhonebook = (filterText) => {\n    return persons.filter(person => person.name.includes(filterText) === true)\n  }\n  const removePerson = (id, name) => {\n    const result = window.confirm(`Delete ${name}?`)\n    if (result) {\n      personService.remove(id).then(response => {\n        setErrorMessage(\n          `Removed ${name}`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      }).catch(error => {\n        setErrorMessage(\n          `Removing ${name} failed with error message: ${error}`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n\n      const filteredPersons = persons.filter(e => {\n        return e.id !== id\n      })\n      setPersons(filteredPersons)\n    }\n  }\n\n  const printPersons = () => filterPhonebook(newFilter).map((person, i) =>\n    <div key={i}>\n      <button style={divStyle} onClick={() => removePerson(person.id, person.name)}>Remove</button>\n      <p style={divStyle}>{person.name} {person.number}</p>\n    </div>\n  )\n\n  return (\n    <div>\n      {printPersons()}\n    </div>\n  )\n}\n\nconst Filter = ({ newFilter, handleFilterChange }) => {\n\n  return (\n    <div>\n      Filter: <input value={newFilter} onChange={handleFilterChange} />\n    </div>\n  )\n}\n\nconst Form = ({ newName, handleNameChange, newNumber, handleNumberChange, addName }) => {\n\n  return (\n    <form>\n      <div>\n        name: <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\" onClick={addName}>add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const addName = (e) => {\n    e.preventDefault()\n    const getRand = () => Math.floor(Math.random() * Math.floor(10000000))\n\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      id: getRand()\n    } // Tilapäisratkaisu, vaatii ID:n tarkistuksen, toki epätodennäköistä että päällekäisyyksiä tulee\n\n    const checkName = (e) => e.name === newName\n    if(personObject.name === undefined || personObject.name === '') {\n      alert('Name must not be empty')\n      return\n    }\n    if (persons.find(checkName) !== undefined) {\n      const result = window.confirm(`${newName} is already added to phonebook. Replace the old number with new one?`)\n      if (result) {\n        persons.forEach((person, id) => {\n          if (person.name === newName) {\n            const updatedObject = {\n              name: person.name,\n              number: newNumber,\n              id: person.id\n            }\n            persons[id] = updatedObject\n            personService.update(person.id, updatedObject).then(response => {\n              setErrorMessage(\n                `Modified the number of ${updatedObject.name}`\n              )\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000)\n            }).catch(error => {\n              setErrorMessage(\n                `Modifying ${updatedObject.name} failed with error message: ${error}`\n              )\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000)\n            })\n          }\n        })\n      }\n    }\n    else {\n      personService.create(personObject).then(response => {\n        setErrorMessage(\n          `Added ${personObject.name}`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      }).catch(error => {\n        setErrorMessage(\n          `${error.response.data.error}`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n    }\n    setPersons(persons)\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleNameChange = (e) => {\n    console.log('Handling name change...', e.target.value)\n    setNewName(e.target.value)\n  }\n\n  const handleNumberChange = (e) => {\n    console.log('Handling number change...', e.target.value)\n    setNewNumber(e.target.value)\n  }\n\n  const handleFilterChange = (e) => {\n    console.log('Handling filter change...', e.target.value)\n    setNewFilter(e.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n\n      <h2>Add new contact</h2>\n      <Form newName={newName} handleNameChange={handleNameChange}\n        newNumber={newNumber} handleNumberChange={handleNumberChange}\n        addName={addName}\n      />\n\n      <h2>Numbers</h2>\n      <Persons newFilter={newFilter} persons={persons} setPersons={setPersons} setErrorMessage={setErrorMessage} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}